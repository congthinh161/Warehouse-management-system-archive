// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Whm.Data.EF;

#nullable disable

namespace WHM.Data.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230823154741_Init_Db_V2")]
    partial class Init_Db_V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Whm.Data.Entities.WhmAccount", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<short>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)2);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("UserName");

                    b.ToTable("WHM_Account");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmAttribute", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeDescription")
                        .HasColumnType("text");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("AttributeId");

                    b.ToTable("WHM_Attribute");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmAttributeValue", b =>
                {
                    b.Property<Guid>("AttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AttributeValueDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("AttributeValueId");

                    b.HasIndex("AttributeId");

                    b.ToTable("WHM_AttributeValue");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("CategoryId");

                    b.ToTable("WHM_Category");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmCategoryAttribute", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryAttributeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("CategoryId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("WHM_CategoryAttribute");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmClient", b =>
                {
                    b.Property<Guid>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ClientId");

                    b.ToTable("WHM_Client");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float>("EstimatedPrice")
                        .HasColumnType("real");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("WHM_Product");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductAttributeValue", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeValueId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ProductId", "AttributeValueId");

                    b.HasIndex("AttributeValueId");

                    b.ToTable("WHM_ProductAttributeValue");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductInput", b =>
                {
                    b.Property<Guid>("ProdInputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<float>("PreMoney")
                        .HasColumnType("real");

                    b.Property<Guid>("SuplierId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ProdInputId");

                    b.HasIndex("SuplierId");

                    b.ToTable("WHM_ProductInput");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductInputDetail", b =>
                {
                    b.Property<Guid>("ProdInputDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float>("InputPrice")
                        .HasColumnType("real");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ProdInputId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ProdInputDetailId");

                    b.HasIndex("ProdInputId");

                    b.HasIndex("ProductId");

                    b.ToTable("WHM_ProductInputDetails");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductOuput", b =>
                {
                    b.Property<Guid>("ProdOuputId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<float>("PrePayment")
                        .HasColumnType("real");

                    b.Property<float>("ServiceFee")
                        .HasColumnType("real");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ProdOuputId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("WHM_ProductOuput");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductOutputDetail", b =>
                {
                    b.Property<Guid>("ProdOutputDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<float>("OutputPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("ProdOutputId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ProdOutputDetailId");

                    b.HasIndex("ProdOutputId");

                    b.HasIndex("ProductId");

                    b.ToTable("WHM_ProductOutputDetails");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmServiceType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("WHM_ServiceType");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmSuplier", b =>
                {
                    b.Property<Guid>("SuplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("MoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdateUser")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("SuplierId");

                    b.ToTable("WHM_Suplier");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmAttributeValue", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmAttribute", "WhmAttribute")
                        .WithMany("WhmAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhmAttribute");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmCategoryAttribute", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmAttribute", "WhmAttribute")
                        .WithMany("WhmCategoryAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whm.Data.Entities.WhmCategory", "WhmCategory")
                        .WithMany("WhmCategoryAttributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhmAttribute");

                    b.Navigation("WhmCategory");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProduct", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmCategory", "CategoryIdNavigation")
                        .WithMany("WhmProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryIdNavigation");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductAttributeValue", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmAttributeValue", "WhmAttributeValueNav")
                        .WithMany("WhmProductAttributeValues")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whm.Data.Entities.WhmProduct", "WhmProductNav")
                        .WithMany("WhmProductAttributeValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhmAttributeValueNav");

                    b.Navigation("WhmProductNav");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductInput", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmSuplier", "WhmSuplier")
                        .WithMany("WhmProductInputs")
                        .HasForeignKey("SuplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhmSuplier");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductInputDetail", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmProductInput", "WhmProductInput")
                        .WithMany("WhmProductInputDetails")
                        .HasForeignKey("ProdInputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whm.Data.Entities.WhmProduct", "WhmProduct")
                        .WithMany("WhmProductInputDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhmProduct");

                    b.Navigation("WhmProductInput");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductOuput", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmClient", "WhmClient")
                        .WithMany("WhmProductOutputs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whm.Data.Entities.WhmServiceType", "WhmServiceType")
                        .WithMany("WhmProductOuput")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhmClient");

                    b.Navigation("WhmServiceType");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductOutputDetail", b =>
                {
                    b.HasOne("Whm.Data.Entities.WhmProductOuput", "WhmProductOuput")
                        .WithMany("WhmProductOutputDetails")
                        .HasForeignKey("ProdOutputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Whm.Data.Entities.WhmProduct", "WhmProduct")
                        .WithMany("WhmProductOutputDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhmProduct");

                    b.Navigation("WhmProductOuput");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmAttribute", b =>
                {
                    b.Navigation("WhmAttributeValues");

                    b.Navigation("WhmCategoryAttributes");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmAttributeValue", b =>
                {
                    b.Navigation("WhmProductAttributeValues");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmCategory", b =>
                {
                    b.Navigation("WhmCategoryAttributes");

                    b.Navigation("WhmProducts");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmClient", b =>
                {
                    b.Navigation("WhmProductOutputs");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProduct", b =>
                {
                    b.Navigation("WhmProductAttributeValues");

                    b.Navigation("WhmProductInputDetails");

                    b.Navigation("WhmProductOutputDetails");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductInput", b =>
                {
                    b.Navigation("WhmProductInputDetails");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmProductOuput", b =>
                {
                    b.Navigation("WhmProductOutputDetails");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmServiceType", b =>
                {
                    b.Navigation("WhmProductOuput");
                });

            modelBuilder.Entity("Whm.Data.Entities.WhmSuplier", b =>
                {
                    b.Navigation("WhmProductInputs");
                });
#pragma warning restore 612, 618
        }
    }
}
